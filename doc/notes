To start our Company database and get it running on the two specified nodes, we enter the following
commands:
1. On the node called gin:
gin %erl -sname a -mnesia dir '"/ldisc/scratch/Mnesia.company"'
2. On the node called skeppet:
skeppet %erl -sname b -mnesia dir '"/ldisc/scratch/Mnesia.company"'
3. On one of the two nodes:
(a@gin1)>mnesia:create schema([a@gin, b@skeppet]).


4. The function mnesia:start() is called on both nodes.
5. To initialize the database, execute the following code on one of the two nodes.
dist_init() ->
mnesia:create_table(employee,
[{ram_copies, [a@gin, b@skeppet]},
{attributes, record_info(fields,
employee)}]),


create_local_table_copy(Tab, Type) ->
    StorageType = mnesia:table_info(Tab, storage_type),
    {atomic, ok} =
        if
            StorageType == unknown ->
                mnesia:add_table_copy(Tab, node(), Type);
            StorageType /= Type ->
                mnesia:change_table_copy_type(Tab, node(), Type);
            true -> {atomic, ok}
        end,
    ok.



init_db(ClusterNodes) ->
    WasDiskNode = mnesia:system_info(use_dir),
    IsDiskNode = ClusterNodes == [] orelse
        lists:member(node(), ClusterNodes),
    case mnesia:change_config(extra_db_nodes, ClusterNodes -- [node()]) of
        {ok, []} ->
            if WasDiskNode and IsDiskNode ->
                    ok;
               WasDiskNode ->
                    throw({error, {cannot_convert_disk_node_to_ram_node,
                                   ClusterNodes}});
               IsDiskNode ->
                    ok = create_schema();
               true ->
                    throw({error, {unable_to_contact_cluster_nodes,
                                   ClusterNodes}})
            end;
        {ok, [_|_]} ->
            ok = ensure_schema_integrity(),
            ok = wait_for_tables(),
            ok = create_local_table_copies(
                   case IsDiskNode of
                       true  -> disc;
                       false -> ram
                   end);
        {error, Reason} ->
            throw({error, {unable_to_join_cluster,
                           ClusterNodes, Reason}})
    end.



all_females() ->
F = fun() ->
Female = #employee{sex = female, name = '$1', _ = '_'},
mnesia:select(employee, [{Female, [], ['$1']}])
end,
mnesia:transaction(F).







mnesia:activity(sync_dirty, Write, [lists:seq(1, 256)], mnesia_frag).
ok
(a@sam)7> mnesia:change_table_frag(Tab, {activate, []}).
{atomic,ok}
(a@sam)8> mnesia:table_info(Tab, frag_properties).
[{base_table,dictionary},
{foreign_key,undefined},
{n_doubles,0},
{n_fragments,1},
{next_n_to_split,1},
{node_pool,[a@sam,b@sam,c@sam]}]
(a@sam)9> Info = fun(Item) -> mnesia:table_info(Tab, Item) end.
#Fun<erl_eval>
(a@sam)10> Dist = mnesia:activity(sync_dirty, Info, [frag_dist], mnesia_frag).
[{c@sam,0},{a@sam,1},{b@sam,1}]
(a@sam)11> mnesia:change_table_frag(Tab, {add_frag, Dist}).

